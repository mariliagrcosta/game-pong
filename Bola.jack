class Bola{

    field int xPosicao, yPosicao; //Posição da bola;
    field boolean inveterDeslocamento; //A bola bateu na parede?
    
    field int paredeEsq, paredeCima, paredeDir, paredeBaixo; //Posição das 4 paredes;
    field int ultimaParede; //Última parede em que a bola bateu;

    //Construtor - Constroi a bola, com base nas informações dadas, e as paredes;
    constructor Bola novo(int xBola, int yBola){
        let xPosicao = xBola; 
        let yPosicao =  yBola

        let paredeEsq = 0
        let paredeCima = 0
        let paredeDir = 506
        let paredeBaixo = 235

        let ultimaParede = 0 //Última parede em que a bola bateu (nenhuma = 0);

        do mostrar()

        return this

    }

    //Método - Encapsula a desalocação de um objeto da memória
    method void dispose() { 
        do Memory.deAlloc(this); // Desaloca o objeto "Bola"
        return;

    }

            //Acessor - Permite que o acesso fora da classe à posição (eixo x) do INÍCIO barra seja possível; 
    method int getEsquerda(){
        return xPosicao; //Retorna a posição do INÍCIO da barra
    }

    //Acessor - Permite que o acesso fora da classe à posição (eixo x) do FIM barra seja possível; 
    method int getDireita(){
        return xPosicao + comprimento; //Retorna a posição do FIM da barra
    }


    //Método - Desenha um retângulo (5x5);
    method void desenhar(){ 
        do Screen.drawRectangle(xPosicao, yPosicao, xPosicao + 4, yPosicao + 4); //Usando a cor atual, desenha um retângulo preenchido;
        return;
    }
    
    //Método - "Mostra" a bola;
    method void mostrar() { 
        do Screen.setColor(true); //Define a cor para preto;
        do desenhar(); //Desenha o retângulo preto (preenchido);
        return;
    }
    
    //Método - "Escode" a bola;
    method void esconder() { 
        do Screen.setColor(false); //Define a cor para branca;
        do desenhar(); //Desenha o retângulo branco (preenchido);
        return;
    }

    //Método - Define para onde a bola deve ir (destino)
    method void destino(int xDestino, int yDestino){

        var int xDistancia, yDistacia; //Posição do destino da bola;
        var int xDistanciaAbs, yDistanciaAbs; //Distância da localização atual para o destino;

        let xDistancia = xDestino - xPosicao; //Calcula, no eixo x, a distância até o destino;
        let yDistancia = yDestino - yPosicao; //Calcula, no eixo y, a distância até o destino;
        let xDistanciaAbs = Math.abs(xDistancia)
        let yDistanciaAbs = Math.abs(yDistancia)

        let inveterDeslocamento = false; //Define se o deslocamento deve ser intertido;

    }

    //Calcula qual foi a última parede que a bola bateu
    method void parede(){
        
        if (x < paredeEsq){

            let ultimaParede = 1; //Determina a última parede como a da esquerda (1)
            let x = paredeEsq; //Determina o x como a posição da parede esquerda (evitar que o litime seja ultrapassado)

        }

        if (y < paredeCima){

            let ultimaParede = 2; //Determina a última parede como a do topo (2)
            let x = paredeCima; //Determina o y como a posição da parede do topo (evitar que o litime seja ultrapassado)

        }

        if (x > paredeDir){

            let ultimaParede = 3; //Determina a última parede como a da direita (3)
            let x = paredeDir; //Determina o x como a posição da parede direita (evitar que o litime seja ultrapassado)

        }

        if (y > paredeBaixo){

            let ultimaParede = 4; //Determina a última parede como a de baixo - a barra (4)
            let x = paredeBaixo; //Determina o y como a posição da parede de baixo - a barra (evitar que o litime seja ultrapassado)

        }

        return;

    } 



}